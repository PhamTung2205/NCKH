@model WebTravel.Models.TblKhachSan
@using Microsoft.AspNetCore.Http
@using Microsoft.EntityFrameworkCore
@inject IHttpContextAccessor HttpContextAccessor
@{
    var userName = HttpContextAccessor.HttpContext.Session.GetString("UserName");
    var userQuyen = HttpContextAccessor.HttpContext.Session.GetString("UserQuyen");
    var userId = HttpContextAccessor.HttpContext.Session.GetString("UserId");
    ViewData["Tile"] = "Món Ăn";
    @inject WebTravel.Data.NCKHContext _context;
    var TinhThanh = _context.TblTinhThanhs.ToList();
    var MonAn = _context.TblMonAns.ToList();
    var GiaiTri = _context.TblGiaiTris.ToList();
    var KhachSan = _context.TblKhachSans.ToList();
    var NhaHang = _context.TblNhaHangs.ToList();

    //Phân trang comment
    var commentSize = 5;

    // Lấy pageNumber an toàn từ query string
    int pageNumber = 1;
    if (Context.Request.Query.ContainsKey("page") && int.TryParse(Context.Request.Query["page"], out int parsedPage))
    {
        pageNumber = Math.Max(parsedPage, 1); // Đảm bảo page >= 1
    }

    // Query lấy tổng số bình luận
    var query = _context.TblTinhThanhKhachSans
        .Where(c => c.FkIdKhachSan == Model.PkIdKhachSan)
        .Include(c => c.FkIdCommentNavigation)
        .Include(c => c.FkIdCommentNavigation.FkIdTaiKhoanNavigation)
        .AsQueryable();//Truy vấn động sẽ giúp ngắn code lại

    int commentCount = query.Count(); // Chỉ thực hiện Count() 1 lần
    int pageCount = (int)Math.Ceiling((double)commentCount / commentSize);

    // Lấy danh sách bình luận phân trang
    var pagedComment = query
        .Skip((pageNumber - 1) * commentSize)
        .Take(commentSize)
        .Select(c => new
        {
            c.FkIdKhachSan,
            c.FkIdDiaChi,
            c.FkIdComment,
            StarComment = c.FkIdCommentNavigation.IstarComment,
            CommentText = c.FkIdCommentNavigation.ScontentComment,
            UserName = c.FkIdCommentNavigation.FkIdTaiKhoanNavigation.SnameTaiKhoan // Chỉ lấy dữ liệu cần thiết
        })
        .ToList();
}
<style>
    .custom-card {
        border-radius: 15px;
        border: 1px solid #ddd;
        padding: 20px;
        box-shadow: 2px 2px 10px rgba(0, 0, 0, 0.1);
        display: flex;
        align-items: center;
        max-width: 1200px; /* Mở rộng card */
        margin: 20px auto;
    }

        .custom-card img {
            width: 500px; /* Ảnh lớn hơn */
            height: 300px;
            border-radius: 10px;
            object-fit: cover;
        }

        .custom-card .content {
            padding-left: 20px;
            flex: 1; /* Nội dung mở rộng tự nhiên */
        }

        .custom-card h3 {
            margin-bottom: 10px;
            font-size: 28px; /* Chữ to hơn */
        }

        .custom-card p {
            font-size: 18px; /* Chữ lớn hơn để dễ đọc */
        }

    .button-comment {
        background-color: #1d3557;
        color: white;
        border-radius: 10px;
        font-weight: bold;
        border: 1px solid #1d3557;
        padding: 10px;
    }

        .button-comment:hover {
            background: #457b9d;
        }

    .section-title {
        font-size: 2rem;
        font-weight: bold;
        text-align: center;
        margin-bottom: 2rem;
        color: #333;
    }

    .post-card {
        transition: transform 0.3s ease, box-shadow 0.3s ease;
        border: none;
        border-radius: 10px;
        overflow: hidden;
    }

        .post-card:hover {
            transform: translateY(-5px);
            box-shadow: 0 5px 15px rgba(0, 0, 0, 0.2);
        }

    .post-image {
        width: 100%;
        height: 200px;
        object-fit: cover;
    }

    .post-title {
        font-size: 1.1rem;
        font-weight: bold;
        margin-top: 10px;
        color: #333;
        line-height: 1.4;
    }

    .post-meta {
        font-size: 0.85rem;
        color: #777;
        display: -webkit-box;
        /* Sử dụng -webkit-box để hỗ trợ line-clamp */
        -webkit-box-orient: vertical;
        /* Định hướng theo chiều dọc */
        -webkit-line-clamp: 3;
        /* Giới hạn tối đa 3 dòng */
        overflow: hidden;
        /* Ẩn phần bị tràn */
        text-overflow: ellipsis;
        /* Hiện dấu "..." khi quá dài */
        width: 100%;
        /* Đảm bảo phần tử có giới hạn */
    }

    .btn-nav {
        position: absolute;
        top: 50%;
        transform: translateY(-50%);
        background-color: rgba(0, 0, 0, 0.2);
        color: white;
        border: none;
        padding: 10px;
        border-radius: 20%;
        cursor: pointer;
    }

    .btn-nav-left {
        left: -50px;
    }

    .btn-nav-right {
        right: -50px;
    }

    .carousel-container {
        display: flex;
        justify-content: center;
        align-items: center;
        gap: 20px;
        position: relative;
        margin-top: 50px;
    }

    .textcontent {
        display: flex;
        align-items: center;
        flex-direction: column;
        background-color: #eae9e9;
        box-shadow: 2px 2px 10px rgba(0, 0, 0, 0.1);
        padding: 20px;
    }

        .textcontent p {
            width: 650px;
            text-align: center;
            font-size: 20px;
        }

        .textcontent button {
            background-color: #f1f1f1;
            border: #b7b5b5 solid 1px;
            border-radius: 10px;
            font-size: 14px;
            padding: 10px;
        }

            .textcontent button:hover {
                background-color: #a5a4a4;
            }




    /* CSS cho hiển thị bình luận */
    .comment {
        border-radius: 15px;
        border: 1px solid #ddd;
        padding: 20px;
        box-shadow: 2px 2px 10px rgba(0, 0, 0, 0.1);
        max-width: 1200px; /* Mở rộng card */
        margin: 20px auto;
    }

    .comment-container {
        max-width: 800px;
        margin: 20px auto;
        padding: 20px;
        background-color: #fff;
        border-radius: 10px;
        box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
    }

    .user-info {
        display: flex;
        align-items: center;
        gap: 10px;
    }

    .user-details {
        font-size: 14px;
        color: #6c757d;
    }

    .rating-display {
        display: flex;
        gap: 5px;
        margin: 10px 0;
    }

    .bubble {
        width: 20px;
        height: 20px;
        border: 2px solid #00C4B4;
        border-radius: 50%;
        display: inline-block;
    }

    .active {
        background-color: #00C4B4;
    }

</style>

<div class="container">
    <div class="custom-card">
        <img src="~/img/Khach_San/@Model.SimageKhachSan" alt="@Model.SimageKhachSan">
        <div class="content">
            <h2>@Model.SnameKhachSan</h2>
            <p>@Model.ScontentKhachSan</p>
        </div>
    </div>
</div>
<a asp-controller="KhachSan" asp-action="Comment" asp-route-id="@Model.PkIdKhachSan">
    <button class="button-comment mt-2">Viết trải nghiệm</button>
</a>

<div class="comment">

    @if (pagedComment != null && pagedComment.Count > 0)
    {
        @for (var i = 0; i < pagedComment.Count; i++)
        {
            <div class="comment-container">
                <div class="user-info">
                    <div>
                        <div>@pagedComment[i].UserName</div>
                    </div>
                </div>
                @for (var j = 0; j < 5; j++)
                {
                    if (j < @pagedComment[i].StarComment)
                    {
                        <span class="bubble active"></span>
                    }
                    else
                    {
                        <span class="bubble"></span>
                    }
                }

                <div class="comment-content">
                    @pagedComment[i].CommentText
                </div>
            </div>

        }
        @if (pageNumber > 1)
        {
            <!-- Thanh phân trang -->
            <nav aria-label="Page navigation" class="mt-4 d-flex justify-content-center">
                <ul class="pagination pagination-lg">
                    <!-- Nút "Trước" -->
                    @if (pageNumber > 1)
                    {
                        <li class="page-item">
                            <a class="page-link rounded-pill shadow-sm" href="?page=@(pageNumber - 1)">« Trước</a>
                        </li>
                    }
                    else
                    {
                        <li class="page-item disabled">
                            <span class="page-link rounded-pill">« Trước</span>
                        </li>
                    }

                    <!-- Các số trang -->
                    @for (int i = 1; i <= pageCount; i++)
                    {
                        <li class="page-item @(i == pageNumber ? "" : "")">
                            <a class="page-link rounded-pill shadow-sm @(i == pageNumber ? "bg-primary text-white" : "")" href="?page=@i">@i</a>
                        </li>
                    }

                    <!-- Nút "Sau" -->
                    @if (pageNumber < pageCount)
                    {
                        <li class="page-item">
                            <a class="page-link rounded-pill shadow-sm" href="?page=@(pageNumber + 1)">Tiếp »</a>
                        </li>
                    }
                    else
                    {
                        <li class="page-item disabled">
                            <span class="page-link rounded-pill">Tiếp »</span>
                        </li>
                    }
                </ul>
            </nav>
        }
    }
    else
    {
        <div class="comment-container">
            <h2>Không có comment</h2>
        </div>
    }
</div>
<div class="container my-5">
    <!-- Tiêu đề chính -->
    <h2 class="section-title">Món ăn lên thử</h2>
    <div class="carousel-container">
        <button class="btn-nav btn-nav-left" onclick="prevImagesGiaiTri()">❮</button>

        <!-- Danh sách bài viết -->
        <div id="card-containerGiaiTri" class=" row g-4">
            @if (GiaiTri != null && GiaiTri.Any())
            {
                <!-- Bài viết 1 -->
                @for (int i = 0; i < Math.Min(3, MonAn.Count); i++)
                {
                    <div class="col-md-4">
                        <a asp-controller="GiaiTri" style="text-decoration: none" asp-action="Details" asp-route-id="@GiaiTri[i].PkIdGiaiTri">

                            <div class="post-card">
                                <img src="~/img/Giai_Tri/@GiaiTri[i].SimageGiaiTri" alt="Đà Nẵng" class="post-image">
                                <div class="p-3">
                                    <h3 class="post-title">@GiaiTri[i].SnameGiaiTri</h3>
                                    <p class="post-meta">
                                        @GiaiTri[i].ScontentGiaiTri
                                    </p>
                                </div>
                            </div>
                        </a>
                    </div>
                }
            }
        </div>
        <button class="btn-nav btn-nav-right" onclick="nextImagesGiaiTri()">❯</button>
    </div>
</div>

<script>
    const categories = [
        { id: "GiaiTri", data: @Html.Raw(Json.Serialize(GiaiTri)), folder: "Giai_Tri", contentKey: "scontentGiaiTri", imageKey: "simageGiaiTri", nameKey: "snameGiaiTri", idKey: "pkIdGiaiTri", controller: "GiaiTri" },
        { id: "Tinh", data: @Html.Raw(Json.Serialize(TinhThanh)), folder: "Tinh_Thanh", contentKey: "scontentTinhThanh", imageKey: "simageTinhThanh", nameKey: "snameTinhThanh", idKey: "pkIdTinhThanh", controller: "TinhThanh" },
        { id: "MonAn", data: @Html.Raw(Json.Serialize(MonAn)), folder: "Mon_An", contentKey: "scontentMonAn", imageKey: "simageMonAn", nameKey: "snameMonAn", idKey: "pkIdMonAn", controller: "MonAn" },
        { id: "NhaHang", data: @Html.Raw(Json.Serialize(NhaHang)), folder: "Nha_Hang", contentKey: "scontentNhaHang", imageKey: "simageNhaHang", nameKey: "snameNhaHang", idKey: "pkIdNhaHang", controller: "NhaHang" },
        { id: "KhachSan", data: @Html.Raw(Json.Serialize(KhachSan)), folder: "Khach_San", contentKey: "scontentKhachSan", imageKey: "simageKhachSan", nameKey: "snameKhachSan", idKey: "pkIdKhachSan", controller: "KhachSan" }

    ];
    var ite = @Html.Raw(Json.Serialize(GiaiTri));
    console.log(categories);
    const visibleCards = 3;
    let baseUrl = "@Url.Content("~/")";

    // Duyệt qua tất cả danh mục để khởi tạo slider
    categories.forEach(category => {
        let currentIndex = 0;

        function renderCards() {
            let container = document.getElementById(`card-container${category.id}`);
            container.innerHTML = "";
            for (let i = 0; i < visibleCards; i++) {
                let imgIndex = (currentIndex + i) % category.data.length;
                let imageUrl = `${baseUrl}img/${category.folder}/${category.data[imgIndex][category.imageKey]}`;
                let itemUrl = `/${category.controller}/Details/${category.data[imgIndex][category.idKey]}`;
                let card = `
                                        <div class="col-md-4">
                                        <a href="${itemUrl}" style="text-decoration: none">
                                        <div class="post-card">
                                            <img src="${imageUrl}" alt="${category.data[imgIndex][category.nameKey]}" class="post-image">
                                            <div class="p-3">
                                                <h3 class="post-title">${category.data[imgIndex][category.nameKey]}</h3>
                                                <p class="post-meta">
                                                    ${category.data[imgIndex][category.contentKey]}
                                                </p>
                                            </div>
                                        </div>
                                        </a>
                                        </div>
                                    `;
                container.innerHTML += card;
            }
        }

        // Khởi tạo hiển thị ban đầu
        renderCards();

        // Gán sự kiện cho nút điều hướng
        window[`nextImages${category.id}`] = function () {
            currentIndex = (currentIndex + 1) % category.data.length;
            renderCards();
        };

        window[`prevImages${category.id}`] = function () {
            currentIndex = (currentIndex - 1 + category.data.length) % category.data.length;
            renderCards();
        };
    });



    function checcAcc() {
        let Acc = "@(userId ?? "")";
        if (!Acc || Acc === "") {
            Swal.fire({
                title: "Bạn chưa đăng nhập!",
                text: "Vui lòng đăng nhập để Chatbot có thể quán lý thông tin cho bạn.",
                icon: "warning",
                showCancelButton: true,
                confirmButtonText: "Đăng nhập",
                cancelButtonText: "Hủy",
            }).then((result) => {
                if (result.isConfirmed) {
                    window.location.href = "/Login"; // Thay đổi đường dẫn tới trang đăng nhập của bạn
                }
            });
            document.getElementById("chatInput").value = "";
            return;
        }
    }


</script>